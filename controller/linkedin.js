import {} from 'dotenv/config';

import axios from 'axios';
import fs from 'fs';
import mantiumAi from '@mantium/mantiumapi';
import querystring from 'querystring';
import request from 'request';

const prompt_id = process.env.MANTIUM_LINKEDIN_PROMPT_ID;
const credentials = {
  username: process.env.MANTIUM_USER_NAME,
  password: process.env.MANTIUM_PASSWORD,
};
const app_url = process.env.APP_URL || `http://localhost:${process.env.PORT}`;

export class LinkedIn {
  /****************************************************************************************************
   Constructor
  *******************************************************************************************************/
  constructor() {
    if (this.apiKey === null) {
      this.getToken();
    }
  }

  async getToken() {
    await mantiumAi
      .Auth()
      .accessTokenLogin({ ...credentials })
      .then((response) => {
        // get bearer_id and set as a api_key
        if (response.data?.attributes) {
          mantiumAi.api_key = response.data.attributes.bearer_id;
          this.apiKey = response.data.attributes.bearer_id;
        } else {
          console.log('Login failed!');
        }
      });
  }

  async getAnswer(question) {
    return await mantiumAi
      .Prompts('OpenAI')
      .execute({
        id: prompt_id,
        input: question,
      })
      .then(async (res) => {
        /*
         * from the successful response collect the prompt_execution_id
         * and then pass this to the result method
         */
        if (res?.prompt_execution_id) {
          return await mantiumAi
            .Prompts('OpenAI')
            .result(res.prompt_execution_id)
            .then((response) => {
              return response;
            });
        }
      });
  }

  apiKey = null;

  async postMessage(req, res) {
    let data = await this.getAnswer(req.body.pinput);

    fs.writeFile('./blogtext.json', JSON.stringify(data), function (err) {
      if (err) {
        console.log('There has been an error saving your configuration data.');
        console.log(err.message);
        return;
      }
    });

    try {
      res.redirect(
        `${app_url}/linkedin`
      );
    } catch (err) {
      console.error(err);
    }

  }

  async auth(req, res) {

    const data = {
      grant_type: 'authorization_code',
      code: req.query.code,
      client_id: '86ggqep9c8bstz',
      client_secret: 'sSZ75iejrDFnx5SS',
      redirect_uri: `${app_url}/auth`,
    };

    const config = {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    };

    let response = '';

    try {
      response = await axios.post(
        'https://www.linkedin.com/oauth/v2/accessToken',
        querystring.stringify(data),
        config
      );
    } catch (err) {
      console.error(err);
    }

    // Retrieving Member ID
    let meRes = '';
    if (response) {
      try {
        meRes = await axios.get('https://api.linkedin.com/v2/me', {
          headers: {
            Authorization: `Bearer ${response.data.access_token}`,
          },
        });
      } catch (err) {
        console.error(err);
      }
    }

    // post on linkedin
    if (response && meRes) {

      var readFileData = fs.readFileSync('./blogtext.json'),
      blogText;

      try {
        blogText = JSON.parse(readFileData);
        console.dir(blogText);
      }
      catch (err) {
        console.log('There has been an error parsing your JSON.')
        console.log(err);
      }

      let body = {
        owner: 'urn:li:person:' + meRes.data.id,
        subject: blogText.input,
        text: {
          text: blogText.input + '\n' +
            blogText.output + '\n\nContent generated by (non-human) AI language model.\n',
        },
        content: {
          contentEntities: [
            {
              entityLocation: 'https://mantiumai.com/',
              thumbnails: [
                {
                  resolvedUrl:
                    'https://mantiumai.com/wp-content/themes/mantium-theme/images/mantium-logo.svg',
                },
              ],
            },
          ],
          title:
            blogText.input,
        },
        distribution: {
          linkedInDistributionTarget: {},
        },
      };

      let headers = {
        'Content-Type': 'application/json',
        'cache-control': 'no-cache',
        'X-Restli-Protocol-Version': '2.0.0',
        'x-li-format': 'json',
        Authorization: `Bearer ${response.data.access_token}`,
      };

      const url = 'https://api.linkedin.com/v2/shares';

      let postResponse = '';
      /**/
      try {
        postResponse = new Promise((resolve, reject) => {
          request.post(
            { url: url, json: body, headers: headers },
            (err, response, body) => {
              if (err) {
                reject(err);
              }
              resolve(body);
            }
          );
        });
      } catch (err) {
        console.error('err ::', err);
      }

      res.status(200).send(blogText);
    }
  }

  accessToken(req, res) {
    res.status(200).send('done');
  }

  linkedin(req, res) {
    const clientID = '86ggqep9c8bstz';
    const scope = 'r_liteprofile r_emailaddress w_member_social';
    const url = 'https://www.linkedin.com/oauth/v2/authorization';
    const redirectURL = `${app_url}/auth&state=2022&scope=${scope}`;
    // const URLENCODE = encodeURIComponent(redirectURL);
    res.redirect(
      `${url}/?response_type=code&client_id=${clientID}&redirect_uri=${redirectURL}`
    );
  }
}
